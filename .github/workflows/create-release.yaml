name: Create Release

on:
  push:
    branches:
      - master

jobs:
  run-unit-tests:
    if: "!contains(github.event.head_commit.message, '[automated release]')"
    name: Run Unit Tests
    runs-on: ubuntu-latest
    container: defrostedtuna/php-nginx:8.0-dev
    steps: 
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: composer install --no-interaction

      - name: Run Unit Tests
        run: |
          php artisan key:generate --env=testing
          vendor/bin/phpunit

  # We want to release every commit that is pushed to master, with the exception of commits that are created
  # as part of a changelog update. Changelog updates do not need to be built. There are two reasons for this.
  # First is that when the code is merged to master, the release has not yet been created. It doesn't make a
  # lot of sense to build the changelog into the master container when the release has not yet been created.
  # Second is that when the release is created, it will contain the changes created by the actual release.
  # While we could use the [skip ci] flag to ignore a changelog commit that is pushed back to master, this
  # would also inadvertently allow the release build process to be skipped as well since they share commits.
  # Instead, standard-version can be configured to apply the [automated release] flag, which we will ignore.
  create-release:
    if: "!contains(github.event.head_commit.message, '[automated release]')"
    name: Create Release
    runs-on: ubuntu-latest
    needs: run-unit-tests
    container:
      image: node:16.7.0-alpine3.14
    steps:
      # Dependencies need to be installed before checking out the code
      # so that the .git folder is cloned along with the repository.
      # Installing gnu grep because I'm tired of dealing with busybox grep patterns.
      - name: Install Dependencies
        run: |
          apk add --no-cache git openssh grep
          yarn global add standard-version
          git config --global user.name "tunabot"
          git config --global user.email rbennett1106@gmail.com

      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0 # This will allow the fetching of tags from the history for versioning.

      # Using `git log --pretty="%B" -1` will get us the head commit of the branch so that we can read the message.
      - name: Check For Version Override
        id: version_override
        run: |
          export VERSION_OVERRIDE=$(echo $(git log --pretty="%B" -1) | grep -Poi "\[release.as.+\]")
          export VERSION=$(echo $VERSION_OVERRIDE | grep -Poi "(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?")
          if [ ! -z "$VERSION" ]; then
            echo "Version set to $VERSION"
            echo "::set-output name=version::$(echo "--release-as $VERSION")"
          fi

      - name: Create Changelog & Tag
        id: prepare_release
        run: |
          git config user.name "tunabot"
          git config user.email rbennett1106@gmail.com
          standard-version -t "" $VERSION
          git push --follow-tags
          echo "Created Tag: $(git rev-parse HEAD | git tag --points-at)"
          echo "::set-output name=commit::$(echo $(git rev-parse HEAD))"
          echo "::set-output name=tag::$(echo $(git rev-parse HEAD | git tag --points-at))"
        env:
          VERSION: ${{ steps.version_override.outputs.version }}

      - name: Get Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          version: ${{ steps.prepare_release.outputs.tag }}
          path: ./CHANGELOG.md

      - name: Publish Release
        uses: ncipollo/release-action@v1.8.6
        with:
          name: v${{ steps.prepare_release.outputs.tag }}
          commit: ${{ steps.prepare_release.outputs.commit }}
          tag: ${{ steps.prepare_release.outputs.tag }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          token: ${{ secrets.GITHUB_TOKEN }}
